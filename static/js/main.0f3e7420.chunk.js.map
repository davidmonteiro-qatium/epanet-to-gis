{"version":3,"sources":["components/DropZoneArea/index.tsx","util/EpanetGeoJsonToShp/index.ts","worker/runToGeoJson.worker.ts","App.tsx","util/saveGeoJson/index.ts","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","dropzone","props","flex","display","flexDirection","alignItems","justifyContent","padding","borderWidth","borderRadius","borderColor","borderStyle","textAlign","backgroundColor","color","outline","transition","minHeight","fontSize","fontFamily","fontWeight","lineHeight","letterSpacing","dropContainer","DropZoneArea","setEpanetInp","setModelFilename","useDropzone","maxFiles","multiple","onDrop","files","reader","FileReader","onabort","console","log","onerror","onload","inpFile","result","readAsText","name","replace","isDragAccept","isDragActive","getRootProps","getInputProps","useTheme","matches","useMediaQuery","breakpoints","up","classes","className","addFilesToZip","fileName","zip","err","file","shp","buffer","binary","shx","dbf","Worker_fn","Worker","root","margin","spacing","modelName","loadingDataLabel","paddingTop","button","Alert","elevation","variant","App","useState","undefined","epanetInp","epanetGeoJson","setEpanetGeoJson","modelFilename","loadingData","setLoadingData","React","open","setOpen","handleClose","event","reason","useEffect","a","worker","RunToGeoJsonWorker","toGeoJson","Comlink","startDummyWorker","svgStrings","useMemo","extents","bbox","left","bottom","right","top","geojson2svg","viewportSize","width","height","attributes","explode","mapExtent","convert","Container","maxWidth","Snackbar","autoHideDuration","onClose","severity","Grid","container","item","xs","Typography","component","gutterBottom","Button","size","startIcon","href","md","direction","CircularProgress","onClick","geoJson","filename","JSZip","pipes","features","filter","f","properties","category","pipesGeom","map","geometry","coordinates","pipesData","shpWrite","write","valves","valvesGeom","valvesData","pumps","pumpsGeom","pumpsData","junctions","junctionsGeom","junctionsData","tanks","tanksGeom","tanksData","reservior","reserviorGeom","reserviorData","generateAsync","type","compression","then","content","saveAs","toShapeFile","blob","Blob","JSON","stringify","saveGeoJson","id","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.0f3e7420.chunk.js","sourcesContent":["import React from 'react';\nimport { Theme } from '@material-ui/core';\nimport { makeStyles, useTheme  } from \"@material-ui/core/styles\";\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nimport {FileWithPath, useDropzone} from 'react-dropzone';\n\ninterface DropzoneStyleProps {\n  borderColor: string;\n  minHeight: string;\n}\n\n\nconst useStyles = makeStyles<Theme, DropzoneStyleProps>((theme: Theme) => ({\n  dropzone: props => ({\n    flex: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: \"20px\",\n    borderWidth: \"2px\",\n    borderRadius: \"2px\",\n    borderColor: props.borderColor,//\"#eeeeee\",\n    borderStyle: \"dashed\",\n    textAlign: \"center\",\n    backgroundColor: \"#f5f5f5\",\n    color: \"#5d5d5d\",\n    outline: \"none\",\n    transition: \"border .24s ease-in-out\",\n    minHeight:  props.minHeight,\n    fontSize: \"20px\",\n    fontFamily: \"'Montserrat','Roboto', 'Helvetica', 'Arial', sans-serif\",\n    fontWeight: 700,\n    lineHeight: 1.2,\n    letterSpacing: \"-0.24px\"\n  }),\n  dropContainer: {\n  }\n\n}));\n\ninterface DropZoneProps {\n    setEpanetInp : (inp:string) => void,\n    setModelFilename : (inp:string) => void,\n  }\n\nfunction DropZoneArea({ setEpanetInp, setModelFilename }: DropZoneProps) {\n\n    \n\n    \n\n    const { \n      isDragAccept,\n      isDragActive,\n      getRootProps,\n      getInputProps\n    } = useDropzone({\n      maxFiles:1,\n      multiple:false,\n      onDrop: (files: FileWithPath[]) => {\n\n        const reader = new FileReader()\n\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = () => {\n        // Do whatever you want with the file contents\n          const inpFile = reader.result  as string;\n          setEpanetInp(inpFile)\n        }\n        \n        reader.readAsText(files[0]);\n        //Regex removes extension\n        setModelFilename(files[0].name.replace(/\\.[^/.]+$/, \"\"))\n      }\n    });\n\n    const theme = useTheme();\n    const matches = useMediaQuery(theme.breakpoints.up('md'));\n\n    const styleProps:DropzoneStyleProps = { \n      borderColor: isDragActive ? isDragAccept ? \"#2196f3\": '#ff1744': \"#eeeeee\",\n      minHeight: matches?  \"450px\":  \"200px\",\n    };\n    const classes = useStyles(styleProps);\n    \n  \n    return (\n      <section   className={classes.dropContainer}>\n        <div className={classes.dropzone}  {...getRootProps()} >\n          <input {...getInputProps()} />\n          <p>Drop an EPANET model here, or click to select file</p>\n        </div>\n      </section>\n    );\n  }\n\nexport default DropZoneArea","//@ts-ignore\nimport shpWrite from 'hwbllmnn-shp-write'\nimport JSZip from 'jszip';\nimport EpanetGeoJSON from '../../interfaces/EpanetGeoJson';\nimport { saveAs } from 'file-saver';\n\n\n\nexport function toShapeFile(geoJson: EpanetGeoJSON, filename: string) {\n\n    // TODO: This could be DRY\n\n    const zip = new JSZip()\n\n    const pipes = geoJson.features.filter( f => f.properties.category === \"Pipe\")\n    const pipesGeom = pipes.map( f => [f.geometry.coordinates])\n    const pipesData = pipes.map( f => f.properties)\n\n    shpWrite.write( pipesData , 'POLYLINE', pipesGeom, addFilesToZip(\"pipes\", zip))\n\n    const valves = geoJson.features.filter( f => f.properties.category === \"Valve\")\n    const valvesGeom = valves.map( f => [f.geometry.coordinates])\n    const valvesData = valves.map( f => f.properties)\n\n    shpWrite.write( valvesData , 'POLYLINE', valvesGeom, addFilesToZip(\"valves\", zip))\n\n    const pumps = geoJson.features.filter( f => f.properties.category === \"Valve\")\n    const pumpsGeom = pumps.map( f => [f.geometry.coordinates])\n    const pumpsData = pumps.map( f => f.properties)\n\n    shpWrite.write( pumpsData , 'POLYLINE', pumpsGeom, addFilesToZip(\"valves\", zip))\n\n\n    const junctions = geoJson.features.filter( f => f.properties.category === \"Junction\")\n    const junctionsGeom = junctions.map( f => f.geometry.coordinates)\n    const junctionsData = junctions.map( f => f.properties)\n\n    shpWrite.write( junctionsData, 'POINT', junctionsGeom, addFilesToZip(\"junctions\", zip))\n\n\n    const tanks = geoJson.features.filter( f => f.properties.category === \"Tank\")\n    const tanksGeom = tanks.map( f => f.geometry.coordinates)\n    const tanksData = tanks.map( f => f.properties)\n\n    shpWrite.write( tanksData, 'POINT', tanksGeom, addFilesToZip(\"tanks\", zip))\n\n\n    const reservior = geoJson.features.filter( f => f.properties.category === \"Reservior\")\n    const reserviorGeom = reservior.map( f => f.geometry.coordinates)\n    const reserviorData = reservior.map( f => f.properties)\n\n    shpWrite.write( reserviorData, 'POINT', reserviorGeom, addFilesToZip(\"reserviors\", zip))\n\n\n    zip.generateAsync({\n        type: 'blob',\n        compression: 'DEFLATE'\n      }).then(function(content) {\n          console.log(content)\n          saveAs(content, `${filename}.zip`);\n        });\n\n}\n\n\n\nfunction addFilesToZip(fileName:string, zip:JSZip) {\n\n    return (err:Error, files:any) => {\n        zip.file(fileName + '.shp', files.shp.buffer, { binary: true })\n        zip.file(fileName + '.shx', files.shx.buffer, { binary: true })\n        zip.file(fileName + '.dbf', files.dbf.buffer, { binary: true })\n    }\n\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/runToGeoJson.worker.7487bee2.worker.js\");\n}\n","import React, {useState, useMemo, useEffect} from 'react';\n\n//@ts-ignore\nimport geojson2svg from 'geojson2svg'\nimport EpanetGeoJSON from './interfaces/EpanetGeoJson';\nimport DropZoneArea from \"./components/DropZoneArea\"\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Container from '@material-ui/core/Container';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nimport bbox from '@turf/bbox'\nimport { toShapeFile } from './util/EpanetGeoJsonToShp';\nimport {saveGeoJson}  from './util/saveGeoJson'\nimport * as Comlink from \"comlink\";\n\n\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport RunToGeoJsonWorker from \"worker-loader!./worker/runToGeoJson.worker\";\nimport { RunToGeoJsonWorkerType } from \"./worker/runToGeoJson.worker\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  modelName: {\n    textAlign: 'center'\n  },\n  loadingDataLabel: {\n    paddingTop:\"10px\"\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction App() {\n\n  const [epanetInp, setEpanetInp] = useState<string | undefined>(\n    undefined\n  );\n  const [epanetGeoJson, setEpanetGeoJson] = useState<EpanetGeoJSON | undefined>(\n    undefined\n  );\n  const [modelFilename, setModelFilename] = useState<string>(\"\");\n  const [loadingData, setLoadingData] = useState<boolean>(false)\n  const [open, setOpen] = React.useState(false);\n\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  \n  const classes = useStyles();\n\n\n  useEffect(() => {\n    const startDummyWorker = async () => {\n      if(epanetInp){\n        setLoadingData(true);\n        const worker = new RunToGeoJsonWorker();\n        // Use Comlink's `wrap` function with the instance to get a function.\n        const toGeoJson = Comlink.wrap<RunToGeoJsonWorkerType>(worker);\n        // Invoke our function for a result like any Promise-returning function.\n        try {\n          const result = await toGeoJson(epanetInp);\n          setEpanetGeoJson(result);\n        } catch {\n          setOpen(true);\n        }\n        \n        \n        setLoadingData(false);\n      }\n    };\n\n    startDummyWorker();\n  }, [epanetInp]);\n\n\n\n  const svgStrings= useMemo(() => {\n\n    if(epanetGeoJson) {\n\n      const extents = bbox(epanetGeoJson)\n      const [left, bottom, right, top] = extents\n  \n      const converter = geojson2svg(\n        { \n          viewportSize: {width:800,height:800},\n          attributes: {\n            'style': 'stroke:#000000; stroke-width:1px;',\n            'vector-effect':'non-scaling-stroke'\n          },\n          explode: false,\n          mapExtent: {\n            \n          left,\n          right,\n          bottom,\n          top\n          }\n        }\n      );\n  \n      return converter.convert(epanetGeoJson)\n\n    }\n\n    return undefined\n\n  },[epanetGeoJson]);\n\n\n  return (\n    <Container maxWidth=\"md\">\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          There was an error loading the INP file\n        </Alert>\n      </Snackbar>\n\n      \n      <Grid spacing={3} \n        container\n      >\n        <Grid item xs={12}>\n          <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n            EPANET to GIS\n          </Typography>\n          <Typography variant=\"body1\" gutterBottom>\n            Create Shapefiles or GeoJSON files of an EPANET hydraulic model. Either drag an INP into the drop zone\n            below or click the area to open a prompt to select the file. All geoprocessing is done locally and no data is sent to the server.\n          </Typography>\n          <Typography variant=\"body1\" gutterBottom>\n            This app is open-source and you can find the source code on GitHub, if submit any problems as issues on GitHub. The app uses epanet-js, a javascript\n            conversion of the owa-epanet library, links to both projects are below. \n          </Typography>\n          <Button\n            variant=\"contained\"\n            color=\"default\"\n            size=\"small\" \n            className={classes.button}\n            startIcon={<GitHubIcon />}\n            href=\"https://github.com/modelcreate/epanet-to-gis\"\n          >\n            epanet-to-gis\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"default\"\n            size=\"small\" \n            className={classes.button}\n            startIcon={<GitHubIcon />}\n            href=\"https://github.com/modelcreate/epanet-js\"\n          >\n            epanet-js\n          </Button>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <DropZoneArea setEpanetInp={setEpanetInp} setModelFilename={setModelFilename} />\n        </Grid>\n        <Grid container xs={12} md={6} justifyContent=\"center\" alignItems=\"center\" >\n\n          { loadingData &&\n            <Grid container  direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n              <CircularProgress />\n              \n              <Typography variant=\"caption\" display=\"block\" className={classes.loadingDataLabel}>\n              Loading data...\n              </Typography>\n            </Grid>\n          }\n          { epanetGeoJson && svgStrings && loadingData === false &&\n            <>\n            <Typography className={classes.modelName} variant=\"h5\" component=\"h2\" gutterBottom>\n              {modelFilename}\n            </Typography>\n            <Grid container justifyContent=\"center\" className={classes.root}>\n              <Button variant=\"contained\"  size=\"small\" color=\"primary\" onClick={() => {toShapeFile(epanetGeoJson, modelFilename)}} >\n                Export as Shapefiles\n              </Button>\n              <Button variant=\"contained\"  size=\"small\" color=\"primary\" onClick={() => { saveGeoJson(epanetGeoJson, modelFilename)}} >\n                Export as GeoJSON\n              </Button>\n            </Grid>\n            <div id=\"mapArea\">\n              <div dangerouslySetInnerHTML={{__html: `<svg id=\"map\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"350\" viewBox=\"0 0 800 800\">${svgStrings}</svg>`}} /> \n            </div>\n            </>\n          }\n\n\n\n        </Grid>\n      </Grid>\n\n    </Container>\n  );\n}\n\nexport default App;\n","import EpanetGeoJSON from '../../interfaces/EpanetGeoJson';\nimport { saveAs } from 'file-saver';\n\nexport function saveGeoJson(geoJson: EpanetGeoJSON, filename:string) {\n\n    const blob = new Blob([JSON.stringify(geoJson)], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, `${filename}.json`);\n\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}